# -*- coding: utf-8 -*-
"""circle_intervalos

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Eaxr8nPaLZoTEVsSznWIPzlDc8NdKh0T

A função `np.linspace(start, stop, num)` do numpy gera uma sequência de números igualmente espaçados entre `start` (início) e `stop` (fim). O parâmetro `num` especifica o número de amostras a serem geradas.

No caso de `angulos = np.linspace(self.angulo_inicial, self.angulo_final, 100)`, a função está gerando 100 ângulos igualmente espaçados entre `self.angulo_inicial` e `self.angulo_final`.

Isso é útil para desenhar o círculo, pois permite calcular as coordenadas x e y para 100 pontos ao longo da circunferência do círculo, resultando em um desenho suave do círculo ou do arco do círculo.
"""

import numpy as np
import matplotlib.pyplot as plt

import numpy as np
import matplotlib.pyplot as plt

class Circulo:

    def __init__(self, raio, angulo_inicial, angulo_final, raio_deslocado=0, angulo_deslocado=0):
        self.raio = raio
        self.angulo_inicial = angulo_inicial
        self.angulo_final = angulo_final
        self.raio_deslocado = raio_deslocado
        self.angulo_deslocado = angulo_deslocado


    def comprimento_de_arco(self):
        s = np.pi * self.raio *((self.angulo_final- self.angulo_inicial)/180)
        return s

    def get_angulo_rad(self):
        return np.radians((self.angulo_final- self.angulo_inicial))

    def get_angulo_graus(self):
        return (self.angulo_final- self.angulo_inicial)

    def get_raio(self):
        return self.raio


    def get_setor_area_circle(self): # área do setor circular
        area = (self.angulo_final- self.angulo_inicial) * np.pi * (self.raio*self.raio)
        area = area/360
        return area

    def x_circle(self):
        angulos = np.linspace(self.angulo_inicial, self.angulo_final, 100) #gera 100 angulos dentro do intervalo

        x = self.raio * np.cos(np.radians(angulos)) + self.raio_deslocado * np.cos(np.radians(self.angulo_deslocado))
        #print(x)
        #print(angulos)

        return x

    def y_circle(self):
        angulos = np.linspace(self.angulo_inicial, self.angulo_final, 100)

        y = self.raio * np.sin(np.radians(angulos)) + self.raio_deslocado * np.sin(np.radians(self.angulo_deslocado))
        #print(y)
        #print(angulos)

        return y

"""

#circulo com 180 graus  e com raio de 4

circulo = Circulo(raio=4,angulo_inicial=0,angulo_final=180) # raio, ang inicial, angulo final

x = circulo.x_circle()
y = circulo.y_circle()

fig, ax = plt.subplots() #  cria uma nova figura com eixos
ax.plot(x, y, color="red") # plota o circulo

# traça a linha da origem até um ponto no círculo
ax.plot([0, x[-1]], [0, y[-1]], color='blue')

ax.axis('equal') # proporcao entre os eixos fica igual =  equal ou auto

plt.show()

# segmento com angulo de 30 e raio de 4



circulo = Circulo(raio=4,angulo_inicial=0,angulo_final=30) # raio, ang inicial, angulo final

x = circulo.x_circle()
y = circulo.y_circle()

fig, ax = plt.subplots() #  cria uma nova figura com eixos
ax.plot(x, y, color="red") # plota o circulo

# traça a linha da origem até um ponto no círculo
ax.plot([0, x[-1]], [0, y[-1]], color='blue')

ax.axis('equal') # proporcao entre os eixos fica igual =  equal ou auto

plt.show()

#Semicircunferencia 



circulo = Circulo(4, 0, 180)  # cria um círculo que vai de 0 a 180 graus

x = circulo.x_circle()
y = circulo.y_circle()

plt.plot(x, y, color="red")
plt.axis("equal")
plt.show() 

"""